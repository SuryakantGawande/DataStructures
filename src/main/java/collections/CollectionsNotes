

The List interface in Java represents an ordered collection of elements, meaning elements are stored in a
 sequential order determined by their index. It allows duplicate elements and maintains the insertion order of
  elements. Here's an overview of the List interface:

Interface: List<E>
Methods:
Adding Elements:

boolean add(E e): Appends the specified element to the end of the list.
void add(int index, E element): Inserts the specified element at the specified position in the list.
boolean addAll(Collection<? extends E> c): Appends all of the elements in the specified collection to the end of
 the list.
boolean addAll(int index, Collection<? extends E> c): Inserts all of the elements in the specified collection
into the list, starting at the specified position.
Removing Elements:

E remove(int index): Removes the element at the specified position in the list and returns it.
boolean remove(Object o): Removes the first occurrence of the specified element from the list, if it is present.
boolean removeAll(Collection<?> c): Removes from the list all of its elements that are contained in the specified
 collection.
void clear(): Removes all of the elements from the list.
Accessing Elements:

E get(int index): Returns the element at the specified position in the list.
E set(int index, E element): Replaces the element at the specified position in the list with the
specified element.
Querying List:

int size(): Returns the number of elements in the list.
boolean isEmpty(): Returns true if the list contains no elements.
boolean contains(Object o): Returns true if the list contains the specified element.
int indexOf(Object o): Returns the index of the first occurrence of the specified element in the list,
 or -1 if the list does not contain the element.
int lastIndexOf(Object o): Returns the index of the last occurrence of the specified element in the list,
 or -1 if the list does not contain the element.
Sublist Operations:

List<E> subList(int fromIndex, int toIndex): Returns a view of the portion of this list between the
specified fromIndex, inclusive, and toIndex, exclusive.
Iteration and Conversion:

Iterator<E> iterator(): Returns an iterator over the elements in the list.
ListIterator<E> listIterator(): Returns a list iterator over the elements in the list.
The List interface provides a flexible and powerful way to manage collections of elements,
 allowing for operations such as adding, removing, accessing, querying, and iterating over elements.
  Common implementations of the List interface include ArrayList, LinkedList, and Vector.

